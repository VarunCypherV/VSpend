🌟 Purpose
The Conventional Commits specification defines a structured format for commit messages to:

Make versioning predictable and automated (aligned with Semantic Versioning).

Generate changelogs and trigger build processes automatically.

Help contributors understand changes and history clearly.

🏗️ Commit Message Structure
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
type: Describes the nature of the change (e.g. feat, fix).

scope: Optional area affected (e.g. feat(parser):).

description: Short summary.

body: Optional longer explanation.

footer(s): Used for metadata and breaking changes.

📌 Common Types
Type	Purpose	Semantic Versioning
feat	Adds new feature	MINOR
fix	Fixes a bug	PATCH
chore	Maintenance tasks	—
docs	Documentation changes	—
refactor	Code refactoring (no behavior change)	—
style	Code style/formatting changes	—
test	Adds or updates tests	—
ci	Continuous integration changes	—
🚨 Breaking Changes
Use ! after type or scope → e.g., feat!: or feat(api)!:.

Or add a footer like:

BREAKING CHANGE: Description of the breaking change.
This maps to MAJOR version bump in SemVer.

🧪 Examples
text
feat(parser): add support for arrays
fix: resolve crash when input is empty
chore!: remove legacy API
BREAKING CHANGE: Legacy API is no longer supported.
❓ FAQ Highlights
Can use any casing, but stay consistent.

Make multiple commits if changes fall under different types.

Mistyped types (e.g., feet) are ignored by tooling.

Not all contributors must follow the spec—maintainers can adjust commits during merges.